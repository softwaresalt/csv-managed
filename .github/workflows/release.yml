name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release Binary
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Clean workspace
        run: cargo clean

      - name: Build binary
        run: cargo build --release

      # Trusted Publishing: obtain short-lived token via OIDC
      - name: Authenticate with crates.io (Trusted Publishing)
        id: auth
        uses: rust-lang/crates-io-auth-action@v1

      # (Optional) Fail early if version already exists
      - name: Check if version already published
        run: |
          VERSION=$(grep -E '^version' Cargo.toml | head -1 | cut -d\" -f2)
          CRATE=$(grep -E '^name' Cargo.toml | head -1 | cut -d\" -f2)
          if curl -sf https://crates.io/api/v1/crates/${CRATE}/${VERSION} > /dev/null; then
            echo "Version ${VERSION} already published on crates.io. Skipping publish."
            echo "publish_needed=false" >> $GITHUB_OUTPUT
          else
            echo "publish_needed=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
        id: version_check

      - name: Dry run publish
        if: steps.version_check.outputs.publish_needed == 'true'
        run: cargo publish --dry-run

      - name: Publish crate to crates.io
        if: steps.version_check.outputs.publish_needed == 'true'
        run: cargo publish --locked
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

      - name: Package binary artifact
        run: |
          mkdir -p dist
          cp target/release/csv-managed dist/
          cd dist
          tar -czf csv-managed-${{ github.ref_name }}-${{ runner.os }}-x86_64.tar.gz csv-managed

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: csv-managed-${{ github.ref_name }}-${{ runner.os }}-x86_64
          path: dist/*.tar.gz

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}